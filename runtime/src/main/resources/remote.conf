akka {
  log-dead-letters = 10000

  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "ERROR"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  remote {
    netty {
      hostname = ""
      port = 0
      tcp.maximum-frame-size = 500000b
    }
    enabled-transports = ["akka.remote.netty.tcp"]
  }

  actor {
    provider = remote

    allow-java-serialization = off

    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "com.spbsu.flamestream.runtime.environment.raw.RawData" = kryo
      "com.spbsu.flamestream.runtime.node.tick.api.TickInfo" = kryo
      "com.spbsu.flamestream.core.data.DataItem" = kryo
      "com.spbsu.flamestream.runtime.node.tick.range.HashRange" = kryo
      "com.spbsu.flamestream.runtime.node.tick.range.api.AddressedItem" = kryo
      "com.spbsu.flamestream.runtime.acker.api.Ack" = kryo
      "com.spbsu.flamestream.runtime.acker.api.RangeCommitDone" = kryo
      "com.spbsu.flamestream.runtime.acker.api.Commit" = kryo
      "com.spbsu.flamestream.runtime.acker.api.MinTimeUpdate" = kryo
      "com.spbsu.flamestream.runtime.node.tick.range.atomic.source.api.Heartbeat" = kryo
      "com.spbsu.flamestream.runtime.node.tick.range.atomic.source.api.Accepted" = kryo
      "com.spbsu.flamestream.runtime.node.tick.range.atomic.source.api.NewHole" = kryo
      "com.spbsu.flamestream.runtime.node.tick.range.atomic.source.api.PleaseWait" = kryo
      "com.spbsu.flamestream.runtime.node.tick.range.atomic.source.api.Replay" = kryo
    }

    kryo {
      type = "graph"
      idstrategy = "default"
      buffer-size = 4096
      max-buffer-size = -1
      use-manifests = false
      use-unsafe = false
      post-serialization-transformations = "off"
      implicit-registration-logging = false
      kryo-trace = false
      resolve-subclasses = false
    }

    default-dispatcher {
      type = "Dispatcher"

      executor = "thread-pool-executor"

      thread-pool-executor {
        fixed-pool-size = 1
      }
    }
  }
}

front-ping-dispatcher {
  type = "Dispatcher"

  executor = "thread-pool-executor"

  thread-pool-executor {
    fixed-pool-size = 1
  }
}

