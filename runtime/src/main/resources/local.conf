akka {
  log-dead-letters = 10000

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    allow-java-serialization = off

    serializers {
      kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "com.spbsu.flamestream.core.DataItem" = kryo
      "com.spbsu.flamestream.runtime.edge.Rear$MinTime" = kryo
      "com.spbsu.flamestream.runtime.master.acker.api.Ack" = kryo
      "com.spbsu.flamestream.runtime.master.acker.api.BufferedMessages" = kryo
      "com.spbsu.flamestream.runtime.master.acker.api.NodeTime" = kryo
      "com.spbsu.flamestream.runtime.master.acker.api.Heartbeat" = kryo
      "com.spbsu.flamestream.runtime.master.acker.api.commit.Prepare" = kryo
      "com.spbsu.flamestream.runtime.master.acker.api.MinTimeUpdate" = kryo
      "com.spbsu.flamestream.runtime.master.acker.api.registry.RegisterFront" = kryo
      "com.spbsu.flamestream.runtime.master.acker.api.registry.RegisterFrontFromTime" = kryo
      "com.spbsu.flamestream.runtime.master.acker.api.registry.FrontTicket" = kryo
      "com.spbsu.flamestream.runtime.master.acker.RegistryHolder$NewFrontRegisterer$Registered" = kryo
      "com.spbsu.flamestream.runtime.master.acker.RegistryHolder$AlreadyRegisteredFrontRegisterer$Registered" = kryo
      "com.spbsu.flamestream.runtime.graph.api.AddressedItem" = kryo
      "com.spbsu.flamestream.runtime.graph.api.Watermark" = kryo
      "com.spbsu.flamestream.runtime.master.acker.api.registry.UnregisterFront" = kryo
      "com.spbsu.flamestream.runtime.master.acker.api.commit.GimmeLastCommit" = kryo
      "com.spbsu.flamestream.runtime.master.acker.api.commit.LastCommit" = kryo
      "com.spbsu.flamestream.runtime.master.acker.api.commit.MinTimeUpdateListener" = kryo
      "com.spbsu.flamestream.runtime.master.acker.api.commit.Ready" = kryo
      "com.spbsu.flamestream.runtime.master.acker.api.commit.Prepared" = kryo
      "com.spbsu.flamestream.runtime.master.acker.api.commit.Commit" = kryo
      "com.spbsu.flamestream.core.Batch$Default" = kryo
      "com.spbsu.flamestream.runtime.graph.SinkJoba$BatchImpl" = kryo
      "com.spbsu.flamestream.runtime.edge.api.BatchAccepted" = kryo
      "com.spbsu.flamestream.runtime.edge.api.RequestNext" = kryo
      "com.spbsu.flamestream.runtime.edge.api.Start" = kryo
      "com.spbsu.flamestream.runtime.edge.api.Checkpoint" = kryo
      "com.spbsu.flamestream.runtime.edge.api.GimmeLastBatch" = kryo
      "akka.actor.ActorSelectionMessage" = kryo
      "akka.actor.ActorIdentity" = kryo
      "java.util.HashMap" = kryo
      "java.util.Map" = kryo
    }

    default-dispatcher {
      type = "Dispatcher"

      executor = "fork-join-executor"

      fork-join-executor {
        parallelism-min = 64
        parallelism-factor = 3.0
        parallelism-max = 64
      }
    }

    default-mailbox {
      mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
    }
  }
}

akka-kryo-serialization {
  type = "nograph"
  idstrategy = "automatic"
  max-buffer-size = -1
  use-manifests = false
  use-unsafe = true
  post-serialization-transformations = "off"
  implicit-registration-logging = false
  kryo-trace = false
  resolve-subclasses = false
  kryo-initializer = "com.spbsu.flamestream.runtime.serialization.AkkaKryoInitializer"
}

processing-dispatcher {
  type = "Dispatcher"

  executor = "fork-join-executor"

  fork-join-executor {
    parallelism-min = 1
    parallelism-factor = 1
    parallelism-max = 1
  }

  throughput = 10
}